"use strict";const ld=require("lodash"),fs=require("fs"),Debug=require("debug"),shell=require("shelljs"),CFG=require("../.config"),{TEST_NODE_ENV,REQUIRED_CONFIG_KEYS}=require("../lib/constants"),{InvalidJSONFileError}=require("../lib/utils"),{absPathname}=require("./shared"),logging=Debug("Weaver:bin:options:config"),pathExists=a=>{try{return fs.existsSync(a)}catch(a){return logging(`pathExists:Error ${a}`),!1}},getJSONContent=a=>{logging(`getJSONContent:filePath ${a}`);try{const b=fs.readFileSync(a),c=JSON.parse(b);return logging(`getJSONContent:content ${b}`),c}catch(a){const b=a.constructor.prototype.name.split(" ")[0];if(["SyntaxError","TypeError"].indexOf(b))return null;throw a}},isJSONFile=a=>{const b=getJSONContent(a),c=b instanceof Object;return c},isValidConfigObject=a=>{const b=ld.isPlainObject(a),c=ld.keys(a),d=ld.intersection(REQUIRED_CONFIG_KEYS,c);return b&&d.length===REQUIRED_CONFIG_KEYS.length},validateConfig=a=>{const b="string"==typeof a,c=pathExists(a),d=isJSONFile(a),e=b&&c&&d,f=e&&getJSONContent(a),g=isValidConfigObject(f);return{valid:e&&g,isValidConfig:g,isPathString:b,isValidPath:c,isJSON:d,isValidFile:e}},showConfig=()=>{const a=JSON.stringify(CFG,null,2);return TEST_NODE_ENV||shell.echo(a),!1},validationFeedback=(a,b)=>{if(!TEST_NODE_ENV&&!a.valid)throw shell.echo("Error: Invalid config file path!",b),shell.echo(a),new InvalidJSONFileError(b)},saveConfigPath=a=>{const b=absPathname(__dirname,"./../.config.json"),c=ld.assign({},CFG,{config:{filePath:a}});try{return fs.writeFileSync(b,JSON.stringify(c,null,2)),TEST_NODE_ENV||shell.echo("Updated config file:\n\t",c.config),!0}catch(a){return TEST_NODE_ENV||shell.echo("Couldn't updated config file",a),!1}},applyConfig=a=>{const b=validateConfig(a);return validationFeedback(b,a),b.valid&&saveConfigPath(a),a};module.exports={pathExists,getJSONContent,isJSONFile,isValidConfigObject,validateConfig,showConfig,validationFeedback,saveConfigPath,applyConfig};